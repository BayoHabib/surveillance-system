// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: vision.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VisionService_StartStream_FullMethodName     = "/surveillance.vision.VisionService/StartStream"
	VisionService_StopStream_FullMethodName      = "/surveillance.vision.VisionService/StopStream"
	VisionService_GetStreamStatus_FullMethodName = "/surveillance.vision.VisionService/GetStreamStatus"
	VisionService_GetHealth_FullMethodName       = "/surveillance.vision.VisionService/GetHealth"
	VisionService_ProcessFrames_FullMethodName   = "/surveillance.vision.VisionService/ProcessFrames"
)

// VisionServiceClient is the client API for VisionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service principal de traitement vidéo
type VisionServiceClient interface {
	// Démarrer un stream de caméra
	StartStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error)
	// Arrêter un stream de caméra
	StopStream(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Récupérer le statut d'un stream
	GetStreamStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Health check du service
	GetHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	// Stream de frames (bidirectionnel)
	ProcessFrames(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FrameRequest, FrameResponse], error)
}

type visionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVisionServiceClient(cc grpc.ClientConnInterface) VisionServiceClient {
	return &visionServiceClient{cc}
}

func (c *visionServiceClient) StartStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamResponse)
	err := c.cc.Invoke(ctx, VisionService_StartStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionServiceClient) StopStream(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, VisionService_StopStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionServiceClient) GetStreamStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, VisionService_GetStreamStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionServiceClient) GetHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, VisionService_GetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionServiceClient) ProcessFrames(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FrameRequest, FrameResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VisionService_ServiceDesc.Streams[0], VisionService_ProcessFrames_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FrameRequest, FrameResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VisionService_ProcessFramesClient = grpc.BidiStreamingClient[FrameRequest, FrameResponse]

// VisionServiceServer is the server API for VisionService service.
// All implementations must embed UnimplementedVisionServiceServer
// for forward compatibility.
//
// Service principal de traitement vidéo
type VisionServiceServer interface {
	// Démarrer un stream de caméra
	StartStream(context.Context, *StreamRequest) (*StreamResponse, error)
	// Arrêter un stream de caméra
	StopStream(context.Context, *StopRequest) (*StopResponse, error)
	// Récupérer le statut d'un stream
	GetStreamStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	// Health check du service
	GetHealth(context.Context, *HealthRequest) (*HealthResponse, error)
	// Stream de frames (bidirectionnel)
	ProcessFrames(grpc.BidiStreamingServer[FrameRequest, FrameResponse]) error
	mustEmbedUnimplementedVisionServiceServer()
}

// UnimplementedVisionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVisionServiceServer struct{}

func (UnimplementedVisionServiceServer) StartStream(context.Context, *StreamRequest) (*StreamResponse, error) {
	return nil, status.Error(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedVisionServiceServer) StopStream(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Error(codes.Unimplemented, "method StopStream not implemented")
}
func (UnimplementedVisionServiceServer) GetStreamStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Error(codes.Unimplemented, "method GetStreamStatus not implemented")
}
func (UnimplementedVisionServiceServer) GetHealth(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Error(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedVisionServiceServer) ProcessFrames(grpc.BidiStreamingServer[FrameRequest, FrameResponse]) error {
	return status.Error(codes.Unimplemented, "method ProcessFrames not implemented")
}
func (UnimplementedVisionServiceServer) mustEmbedUnimplementedVisionServiceServer() {}
func (UnimplementedVisionServiceServer) testEmbeddedByValue()                       {}

// UnsafeVisionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VisionServiceServer will
// result in compilation errors.
type UnsafeVisionServiceServer interface {
	mustEmbedUnimplementedVisionServiceServer()
}

func RegisterVisionServiceServer(s grpc.ServiceRegistrar, srv VisionServiceServer) {
	// If the following call panics, it indicates UnimplementedVisionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VisionService_ServiceDesc, srv)
}

func _VisionService_StartStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServiceServer).StartStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisionService_StartStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServiceServer).StartStream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisionService_StopStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServiceServer).StopStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisionService_StopStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServiceServer).StopStream(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisionService_GetStreamStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServiceServer).GetStreamStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisionService_GetStreamStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServiceServer).GetStreamStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisionService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisionService_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServiceServer).GetHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisionService_ProcessFrames_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VisionServiceServer).ProcessFrames(&grpc.GenericServerStream[FrameRequest, FrameResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VisionService_ProcessFramesServer = grpc.BidiStreamingServer[FrameRequest, FrameResponse]

// VisionService_ServiceDesc is the grpc.ServiceDesc for VisionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VisionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "surveillance.vision.VisionService",
	HandlerType: (*VisionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartStream",
			Handler:    _VisionService_StartStream_Handler,
		},
		{
			MethodName: "StopStream",
			Handler:    _VisionService_StopStream_Handler,
		},
		{
			MethodName: "GetStreamStatus",
			Handler:    _VisionService_GetStreamStatus_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _VisionService_GetHealth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessFrames",
			Handler:       _VisionService_ProcessFrames_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "vision.proto",
}
